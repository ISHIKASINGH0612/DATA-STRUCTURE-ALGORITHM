#include<stdio.h>
//structing a node
struct node
{
	int data;
	struct node*left;
	struct node*right;
};
//creating a node
struct node* create_node(int data)
{
	struct node*n;
	n = (struct node *) malloc(sizeof(struct node));
	n->data=data;
	n->left=NULL;
	n->right=NULL;
}
//PREORDER
void preorder(struct node*root)
{
	if(root!=NULL)
	{
		printf("%d",root->data);
		preorder(root->left);
		preorder(root->right);
	}
}
//POSTORDER
void postorder(struct node*root)
{
	if(root!=NULL)
	{
		postorder(root->left);
		postorder(root->right);
		printf("%d",root->data);
	}
}
//INORDER
void inorder(struct node*root)
{
	if(root!=NULL)
	{
		inorder(root->left);
		printf("%d",root->data);
		inorder(root->right);
	}
}
//check if BST
int BST(struct node*root)
{
	static struct node*prev=NULL;
	if(root!=NULL)
	{
		if(!BST(root->left))
		{
			return 0;
		}
		if(prev!=NULL && root->data<=prev->data)
		{
			return 0;
		}
		prev=root;
		return BST(root->right);
			}
	else
	{
		return 1;
	}
}
//main function
//creating a tree
int main()
{
	struct node*p=create_node(9);
	struct node*p1=create_node(4);
	struct node*p2=create_node(2);
	struct node*p3=create_node(7);
	struct node*p4=create_node(5);
	struct node*p5=create_node(8);
	struct node*p6=create_node(11);
	struct node*p7=create_node(15);
	struct node*p8=create_node(14);
	p->left=p1;
	p->right=p6;
	p1->left=p2;
	p1->right=p3;
	p2->left=NULL;
	p2->right=NULL;
	p3->left=p4;
	p3->right=p5;
	p4->left=NULL;
	p4->right=NULL;
	p5->left=NULL;
	p5->right=NULL;
	p6->left=NULL;
	p6->right=p7;
	p7->left=p8;
	p7->right=NULL;
	p8->left=NULL;
	p8->right=NULL;
	inorder(p);
	if (BST(p))
	{
		printf("IT IS A BINARY SEARCH TREE");
	}
	else
	{
		printf("IT IS NOT A BINARY SEARCH TREE");
	}
	
}
